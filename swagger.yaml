swagger: "2.0"
info:
  description: |
    SunVibe is a Solar Energy Platform where small investors - crowd founders - together finance solar panel
    installation on the roof of other peopleâ€™s - roof lenders - house.
    The installation is constructing by authorized Installers, but the quality assurance and monitoring done by SunVibe.  version: "0.1.0"
  title: "SunVibe API"
  termsOfService: "http://sunvibe.vn/terms"
  contact:
    email: "apiteam@sunvibe.vn"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: "0.1.0"
host: "api.sunvibe.vn"
basePath: "/v1"
tags:
- name: "bid"
  description: "Bid operations"
  externalDocs:
    description: "Find out more about our web site"
    url: "http://sunvibe.vn/investor"
schemes:
- "http"
paths:
  /bids:
    get:
      tags:
      - "bid"
      summary: "List Bids"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "listBids"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      - name: "limit"
        in: "query"
        description: "Sets limit for the bids in the response. Min: 1, max: 1000, default: 100"
        type: "integer"
        required: false
        maximum: 1000
        minimum: 1
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Bid"
        400:
          description: "Invalid status value"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "bid"
      summary: "Add a new bid to the market"
      description: "Add token buying offering"
      operationId: "addBid"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Bid object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/NewBid"
      responses:
        201:
          description: "Created"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        405:
          description: "Invalid input"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /bids/{id}:
    get:
      tags:
      - "bid"
      summary: "Get bid details by ID"
      description: "Returns a bid based on a single ID"
      operationId: "getBid"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of bid to fetch"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Bid"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Bid not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "bid"
      summary: "Update an existing bid"
      description: "Modify bid status only"
      operationId: "updateBid"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of bid to fetch"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Bid object that needs to be modified"
        required: true
        schema:
          $ref: "#/definitions/Bid"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Bid not found"
        405:
          description: "Validation exception"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
    delete:
      tags:
      - "bid"
      summary: "Deletes and existing bid"
      description: "Deletes a single bet based on the ID supplied"
      operationId: "delBid"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of bid to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "bid deleted"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Bid not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /fok-bids:
    post:
      tags:
      - "bid"
      summary: "Fill or kill bids"
      description: "Only accept existing ask - selling request"
      operationId: "fokBid"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Bid object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/NewBid"
      responses:
        204:
          description: "Deal succeed"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        405:
          description: "Invalid input"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /asks:
    get:
      tags:
      - "ask"
      summary: "List Asks"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "listAsks"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      - name: "limit"
        in: "query"
        description: "Sets limit for the bids in the response. Min: 1, max: 1000, default: 100"
        type: "integer"
        required: false
        maximum: 1000
        minimum: 1
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Ask"
        400:
          description: "Invalid status value"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "ask"
      summary: "Add a new ask to the market"
      description: "Add token buying offering"
      operationId: "addAsk"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/NewAsk"
      responses:
        201:
          description: "Created"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        405:
          description: "Invalid input"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /asks/{id}:
    get:
      tags:
      - "ask"
      description: "Returns a user based on a single ID, if the user does not have access to the pet"
      operationId: "getAsk"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of ask to fetch"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Ask"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Ask not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "ask"
      summary: "Update an existing ask"
      description: ""
      operationId: "updateAsk"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of ask to fetch"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Ask"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Ask not found"
        405:
          description: "Validation exception"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
    delete:
      tags:
      - "ask"
      description: "deletes a single bet based on the ID supplied"
      operationId: "delAsk"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of ask to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "ask deleted"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Ask not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /fok-asks:
    post:
      tags:
      - "ask"
      summary: "Fill or kill asks"
      description: "Only accept existing ask - selling request"
      operationId: "fokAsk"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/NewAsk"
      responses:
        204:
          description: "Deal succeed"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        405:
          description: "Invalid input"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
securityDefinitions:
  BasicAuth:
    type: basic
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://sunvibe.vn/oauth/authorize
    tokenUrl: https://sunvibe.vn/oauth/token
    scopes:
      investor: Grants investor access
      admin: Grants access to administrative information
definitions:
  NewBid:
    type: object
    properties:
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int64"
    required:
      - quantity
      - price
  Bid:
    allOf:
      - $ref: '#/definitions/NewBid'
      - properties:
          id:
            type: "integer"
            format: "int64"
          bidder:
            $ref: '#/definitions/Investor'
          status:
            type: "string"
            description: "Bid Status"
            enum:
            - "open"
            - "cancelled"
            - "completed"
          active:
            type: "boolean"
            default: true
          created:
            type: "string"
            format: "date-time"
          modified:
            type: "string"
            format: "date-time"
        required:
          - id
  NewAsk:
    type: object
    properties:
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int64"
    required:
      - quantity
      - price
  Ask:
    allOf:
      - $ref: '#/definitions/NewAsk'
      - properties:
          id:
            type: "integer"
            format: "int64"
          seller:
            $ref: '#/definitions/Investor'
          status:
            type: "string"
            description: "Bid Status"
            enum:
            - "open"
            - "cancelled"
            - "completed"
          active:
            type: "boolean"
            default: true
          created:
            type: "string"
            format: "date-time"
          modified:
            type: "string"
            format: "date-time"
        required:
          - id
  Investor:
    type: object
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      phone:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
  UnexpectedError:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
externalDocs:
  description: "Find out more about SunVibe"
  url: "http://sunvibe.vn"
