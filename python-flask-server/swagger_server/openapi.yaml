openapi: 3.0.0
info:
  description: >
    SunVibe is a Solar Energy Platform where small investors - crowd founders -
    together finance solar panel installation on the roof of other peopleâ€™s -
    roof lenders - house.

    The installation is constructing by authorized Installers, but the quality
    assurance and monitoring done by SunVibe.
  version: 0.1.0
  title: SunVibe API
  termsOfService: 'http://sunvibe.vn/terms'
  contact:
    email: apiteam@sunvibe.vn
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: bid
    description: Bid operations on SunVibeToken marketplace
    externalDocs:
      description: Find out more about our web site
      url: 'http://sunvibe.vn/investor'
  - name: ask
    description: Ask operations on SunVibeToken marketplace
    externalDocs:
      description: Find out more about our web site
      url: 'http://sunvibe.vn/investor'
  - name: user
    description: 'User operations, sign-in, log-in, list etc.'
paths:
  /bids:
    get:
      tags:
        - bid
      summary: List Bids
      description: Multiple status values can be provided with comma separated strings
      operationId: controllers.bid_controller.list_bids
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - sold
              default: available
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bid'
        '400':
          description: Invalid request message
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    post:
      tags:
        - bid
      summary: Add a new bid to the market
      description: 'Add a token buying offer to the marketplace. '
      operationId: controllers.bid_controller.add_bid
      responses:
        '201':
          description: New bid was added to the market successfully
          headers:
            Location:
              description: The Server returns the URL of the new bid
              schema:
                type: string
                default: /bisd/1
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBid'
        description: |-
          Bid object that needs to be added to the market
          quantity is the amount of token and price is VND price of one token
        required: true
  '/bids/{id}':
    get:
      tags:
        - bid
      summary: Get bid details by ID
      description: Returns a bid based on a single ID
      operationId: controllers.bid_controller.get_bid
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'
        '400':
          description: Invalid request message
        '404':
          description: Bid not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    put:
      tags:
        - bid
      summary: Update an existing bid
      description: Modify bid status only
      operationId: controllers.bid_controller.update_bid
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '201':
          description: Updated
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        '404':
          description: Bid not found
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bid'
        description: Bid object that needs to be modified
        required: true
    delete:
      tags:
        - bid
      summary: Deletes and existing bid
      description: Deletes a single bet based on the ID supplied
      operationId: controllers.bid_controller.del_bid
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: bid deleted
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        '404':
          description: Bid not found
        default:
          description: unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
  /fok-bids:
    post:
      tags:
        - bid
      summary: Fill or kill bids
      description: Only accept existing ask - selling request
      operationId: controllers.bid_controller.fok_bid
      responses:
        '204':
          description: Deal succeed
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBid'
        description: Bid object that needs to be added to the market
        required: true
  /asks:
    get:
      tags:
        - ask
      summary: List Asks
      description: Multiple status values can be provided with comma separated strings
      operationId: controllers.ask_controller.list_asks
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - sold
              default: available
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ask'
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    post:
      tags:
        - ask
      summary: Add a new ask to the market
      description: Add token buying offering
      operationId: controllers.ask_controller.add_ask
      responses:
        '201':
          description: New ask was added to the market successfully
          headers:
            Location:
              description: The Server returns the URL of the new ask
              schema:
                type: string
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
      requestBody:
        $ref: '#/components/requestBodies/NewAsk'
  '/asks/{id}':
    get:
      tags:
        - ask
      description: >-
        Returns a user based on a single ID, if the user does not have access to
        the pet
      operationId: controllers.ask_controller.get_ask
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
        '400':
          description: Invalid request message
        '404':
          description: Ask not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    put:
      tags:
        - ask
      summary: Update an existing ask
      description: ''
      operationId: controllers.ask_controller.update_ask
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '201':
          description: Updated
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        '404':
          description: Ask not found
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ask'
        description: Ask object that needs to be added to the store
        required: true
    delete:
      tags:
        - ask
      description: deletes a single bet based on the ID supplied
      operationId: controllers.ask_controller.delAsk
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: ask deleted
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        '404':
          description: Ask not found
        default:
          description: unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
  /fok-asks:
    post:
      tags:
        - ask
      summary: Fill or kill asks
      description: Only accept existing ask - selling request
      operationId: controllers.ask_controller.fok_ask
      responses:
        '204':
          description: Deal succeed
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
      requestBody:
        $ref: '#/components/requestBodies/NewAsk'
  /users:
    get:
      tags:
        - user
      summary: Returns all users in the database.
      description: Only the admin can access this.
      operationId: controllers.user_controller.list_users
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - admin
    post:
      tags:
        - user
      summary: Creates a new user
      description: Only the admin user can create users.
      operationId: controllers.user_controller.add_user
      responses:
        '201':
          description: New user was created successfully
          headers:
            Location:
              description: The Server returns the URL of the new user
              schema:
                type: string
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        description: The user account to create
        required: true
  '/users/{id}':
    get:
      tags:
        - user
      summary: Retrieves a user
      description: >-
        Users can only retrieve their own account, except for the admin, who can
        retrieve anyone.
      operationId: controllers.user_controller.get_user
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request message
        '404':
          description: Ask not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - registered
    put:
      tags:
        - user
      summary: Update a user
      description: >-
        Users can only update their own account, except the admin, who can edit
        anyone.
      operationId: controllers.user_controller.update_user
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '201':
          description: Updated
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        '404':
          description: Ask not found
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - registered
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: The user account to create
        required: true
    delete:
      tags:
        - user
      summary: Deletes a user
      description: 'Users can only delete their own account, admin can delete everyone else.'
      operationId: controllers.user_controller.del_user
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: User deleted
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        '404':
          description: User not found
        default:
          description: unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      security:
        - OAuth2:
            - investor
  /users/login:
    post:
      tags:
        - user
      summary: Logs in already registered users and admin
      description: ''
      operationId: controllers.user_controller.user_login
      responses:
        '200':
          description: Login was successful
          headers:
            Set-Cookie:
              description: The session cookie
              schema:
                type: string
                default: SESSIONID=123456789012345678901234567890; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionid:
                    type: string
                    description: API or Session key.
                    default: '123456789012345678901234567890'
        '401':
          description: Not authenticated
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
        description: The login credentials
        required: true
  '/users/{id}/logout':
    post:
      tags:
        - user
      summary: Logs out the given user
      description: 'Users can only log themselves out, admin can log-out anyone.'
      operationId: controllers.user_controller.user_logout
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: Logout was successful
          headers:
            Set-Cookie:
              description: Deletes the session cookie for self logout
              schema:
                type: string
                default: 'SESSIONID=; Expires=Thu, 01-Jan-1970 00:00:01 GMT; Path=/'
        '400':
          description: Invalid request message
        '401':
          description: Not authenticated
        '403':
          description: Out of scope
        '404':
          description: User not found
        default:
          description: unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnexpectedError'
externalDocs:
  description: Find out more about SunVibe
  url: 'http://sunvibe.vn'
servers:
  - url: 'http://api.sunvibe.vn/v1'
#  - url: 'http://localhost:8080/v1'
components:
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        minimum: 0
    limitParam:
      in: query
      name: limit
      required: false
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
    idParam:
      in: path
      name: id
      description: ID of the object to fetch
      required: true
      schema:
        type: integer
        format: int64
  requestBodies:
    NewAsk:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewAsk'
      description: Ask object that needs to be added to the market
      required: true
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://sunvibe.vn/oauth/authorize'
          tokenUrl: 'https://sunvibe.vn/oauth/token'
          scopes:
            investor: Grants investor access. Users with confirmed registration.
            registered: Grants registered user access.
            admin: Grants access to administrative information.
  schemas:
    NewBid:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        price:
          type: integer
          format: int64
        bidder:
          $ref: '#/components/schemas/Investor'
      required:
        - quantity
        - price
    Bid:
      allOf:
        - $ref: '#/components/schemas/NewBid'
        - properties:
            id:
              type: integer
              format: int64
            status:
              type: string
              description: Bid Status
              enum:
                - open
                - cancelled
                - completed
            active:
              type: boolean
              default: true
            created:
              type: string
              format: date-time
            modified:
              type: string
              format: date-time
          required:
            - id
    NewAsk:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        price:
          type: integer
          format: int64
        seller:
          $ref: '#/components/schemas/Investor'
      required:
        - quantity
        - price
    Ask:
      allOf:
        - $ref: '#/components/schemas/NewAsk'
        - properties:
            id:
              type: integer
              format: int64
            status:
              type: string
              description: Bid Status
              enum:
                - open
                - cancelled
                - completed
            active:
              type: boolean
              default: true
            created:
              type: string
              format: date-time
            modified:
              type: string
              format: date-time
          required:
            - id
    LoginUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    NewUser:
      allOf:
        - $ref: '#/components/schemas/LoginUser'
        - properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            phone:
              type: string
            email:
              type: string
    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - properties:
            password:
              type: string
              format: password
    Investor:
      allOf:
        - $ref: '#/components/schemas/User'
    UnexpectedError:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string