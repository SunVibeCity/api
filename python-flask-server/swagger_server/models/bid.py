# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.investor import Investor  # noqa: F401,E501
from swagger_server.models.new_bid import NewBid  # noqa: F401,E501
from swagger_server import util


class Bid(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, quantity: int=None, price: int=None, bidder: Investor=None, id: int=None, status: str=None, active: bool=True, created: datetime=None, modified: datetime=None):  # noqa: E501
        """Bid - a model defined in Swagger

        :param quantity: The quantity of this Bid.  # noqa: E501
        :type quantity: int
        :param price: The price of this Bid.  # noqa: E501
        :type price: int
        :param bidder: The bidder of this Bid.  # noqa: E501
        :type bidder: Investor
        :param id: The id of this Bid.  # noqa: E501
        :type id: int
        :param status: The status of this Bid.  # noqa: E501
        :type status: str
        :param active: The active of this Bid.  # noqa: E501
        :type active: bool
        :param created: The created of this Bid.  # noqa: E501
        :type created: datetime
        :param modified: The modified of this Bid.  # noqa: E501
        :type modified: datetime
        """
        self.swagger_types = {
            'quantity': int,
            'price': int,
            'bidder': Investor,
            'id': int,
            'status': str,
            'active': bool,
            'created': datetime,
            'modified': datetime
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'price': 'price',
            'bidder': 'bidder',
            'id': 'id',
            'status': 'status',
            'active': 'active',
            'created': 'created',
            'modified': 'modified'
        }

        self._quantity = quantity
        self._price = price
        self._bidder = bidder
        self._id = id
        self._status = status
        self._active = active
        self._created = created
        self._modified = modified

    @classmethod
    def from_dict(cls, dikt) -> 'Bid':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bid of this Bid.  # noqa: E501
        :rtype: Bid
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Bid.


        :return: The quantity of this Bid.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Bid.


        :param quantity: The quantity of this Bid.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def price(self) -> int:
        """Gets the price of this Bid.


        :return: The price of this Bid.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this Bid.


        :param price: The price of this Bid.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def bidder(self) -> Investor:
        """Gets the bidder of this Bid.


        :return: The bidder of this Bid.
        :rtype: Investor
        """
        return self._bidder

    @bidder.setter
    def bidder(self, bidder: Investor):
        """Sets the bidder of this Bid.


        :param bidder: The bidder of this Bid.
        :type bidder: Investor
        """

        self._bidder = bidder

    @property
    def id(self) -> int:
        """Gets the id of this Bid.


        :return: The id of this Bid.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Bid.


        :param id: The id of this Bid.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this Bid.

        Bid Status  # noqa: E501

        :return: The status of this Bid.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Bid.

        Bid Status  # noqa: E501

        :param status: The status of this Bid.
        :type status: str
        """
        allowed_values = ["open", "cancelled", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def active(self) -> bool:
        """Gets the active of this Bid.


        :return: The active of this Bid.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Bid.


        :param active: The active of this Bid.
        :type active: bool
        """

        self._active = active

    @property
    def created(self) -> datetime:
        """Gets the created of this Bid.


        :return: The created of this Bid.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this Bid.


        :param created: The created of this Bid.
        :type created: datetime
        """

        self._created = created

    @property
    def modified(self) -> datetime:
        """Gets the modified of this Bid.


        :return: The modified of this Bid.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified: datetime):
        """Sets the modified of this Bid.


        :param modified: The modified of this Bid.
        :type modified: datetime
        """

        self._modified = modified
