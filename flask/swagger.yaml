swagger: "2.0"
info:
  description: "SunVibe is a Solar Energy Platform where small investors - crowd founders\
    \ - together finance solar panel installation on the roof of other peopleâ€™s -\
    \ roof lenders - house.\nThe installation is constructing by authorized Installers,\
    \ but the quality assurance and monitoring done by SunVibe.\n"
  version: "0.1.0"
  title: "SunVibe API"
  termsOfService: "http://sunvibe.city/terms"
  contact:
    email: "mr.oliver.nadj@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "user"
  description: "User operations, sign-in, log-in, list etc."
- name: "bid"
  description: "Bid operations on SunVibeToken marketplace"
  externalDocs:
    description: "Find out more about our web site"
    url: "http://sunvibe.city/investor"
- name: "ask"
  description: "Ask operations on SunVibeToken marketplace"
  externalDocs:
    description: "Find out more about our web site"
    url: "http://sunvibe.city/investor"
- name: "book"
  description: "Book entry operations on SunVibeToken marketplace"
- name: "wallet"
  description: "Wallet information of the users"
schemes:
- "http"
paths:
  /users:
    get:
      tags:
      - "user"
      summary: "Returns all users in the database."
      description: "Only the admin can access this."
      operationId: "controllers.user_controller.list_users"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "admin"
    post:
      tags:
      - "user"
      summary: "Creates a new user"
      description: "Only the admin user can create users."
      operationId: "controllers.user_controller.add_user"
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
          description: "The user account to create"
      responses:
        201:
          description: "New user was created successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new user"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
#      security:
#      - OAuth2:
#        - "admin"
  /users/{id}:
    get:
      tags:
      - "user"
      summary: "Retrieves a user"
      description: "Users can only retrieve their own account, except for the admin, who can retrieve anyone."
      operationId: "controllers.user_controller.get_user"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid request message"
        404:
          description: "User not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "registered"
    put:
      tags:
      - "user"
      summary: "Update a user"
      description: "Users can only update their own account, except the admin, who can edit anyone."
      operationId: "controllers.user_controller.update_user"
      consumes:
        - "application/json"
      parameters:
        - $ref: "#/parameters/idParam"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
          description: "The user account to create"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "User not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "registered"
    delete:
      tags:
      - "user"
      summary: "Deletes a user"
      description: "Users can only delete their own account, admin can delete everyone else."
      operationId: "controllers.user_controller.del_user"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "User deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "User not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /users/login:
    post:
      tags:
      - "user"
      summary: "Logs in already registered users and admin"
      description: ""
      operationId: "controllers.user_controller.user_login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          description: "The login credentials"
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "Login was successful"
          schema:
            type: "object"
            properties:
              sessionid:
                type: "string"
                description: "API or Session key."
                default: "123456789012345678901234567890"
          headers:
            Set-Cookie:
              type: "string"
              description: "The session cookie"
              default: "SESSIONID=123456789012345678901234567890; Path=/; HttpOnly"
        401:
          description: "Not authenticated"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
  /users/{id}/logout:
    post:
      tags:
      - "user"
      summary: "Logs out the given user"
      description: "Users can only log themselves out, admin can log-out anyone."
      operationId: "controllers.user_controller.user_logout"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "Logout was successful"
          headers:
            Set-Cookie:
              type: "string"
              description: "Deletes the session cookie for self logout"
              default: "SESSIONID=; Expires=Thu, 01-Jan-1970 00:00:01 GMT; Path=/"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "User not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
  /bids:
    get:
      tags:
      - "bid"
      summary: "Lists Bids"
      description: "Lists buying offers"
      operationId: "controllers.bid_controller.list_bids"
      produces:
      - "application/json"
      parameters:
      - name: "active"
        in: "query"
        description: "Active status. Available for buy or not anymore"
        required: false
        type: "boolean"
      - name: "symbol"
        in: "query"
        description: "Company or share symbol"
        required: false
        type: "string"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Bid"
        400:
          description: "Invalid request message"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "bid"
      summary: "Add a new bid to the market"
      description: "Add a token buying offer to the marketplace."
      operationId: "controllers.bid_controller.add_bid"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Bid object that needs to be added to the market\nquantity is the amount of token and\
          \ price is VND price of one token"
        required: true
        schema:
          $ref: "#/definitions/Bid"
      responses:
        201:
          description: "New bid was added to the market successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new bid"
              default: "/bisd/1"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /bids/{id}:
    get:
      tags:
      - "bid"
      summary: "Get bid details by ID"
      description: "Returns a bid based on a single ID"
      operationId: "controllers.bid_controller.get_bid"
      produces:
        - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Bid"
        400:
          description: "Invalid request message"
        404:
          description: "Bid not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "bid"
      summary: "Update an existing bid"
      description: "Modify bid status only"
      operationId: "controllers.bid_controller.update_bid"
      consumes:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      - in: "body"
        name: "body"
        description: "Bid object that needs to be modified"
        required: true
        schema:
          $ref: "#/definitions/Bid"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Bid not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
    delete:
      tags:
      - "bid"
      summary: "Deletes and existing bid"
      description: "Deletes a single bet based on the ID supplied"
      operationId: "controllers.bid_controller.del_bid"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        "204":
          description: "bid deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Bid not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /fok-bids:
    post:
      tags:
      - "bid"
      summary: "Fill or kill bids"
      description: "Only accept existing ask - selling request"
      operationId: "controllers.bid_controller.fok_bid"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Bid object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/Bid"
      responses:
        204:
          description: "Deal succeed"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /asks:
    get:
      tags:
      - "ask"
      summary: "Lists Asks"
      description: "Lists of selling offers in the marketplace"
      operationId: "controllers.ask_controller.list_asks"
      produces:
      - "application/json"
      parameters:
      - name: "active"
        in: "query"
        description: "Active status. Available for sell or not anymore"
        required: false
        type: "boolean"
      - name: "symbol"
        in: "query"
        description: "Company or share symbol"
        required: false
        type: "string"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Ask"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "ask"
      summary: "Add a new ask to the market"
      description: "Add token buying offering"
      operationId: "controllers.ask_controller.add_ask"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/Ask"
      responses:
        201:
          description: "New ask was added to the market successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new ask"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /asks/{id}:
    get:
      tags:
      - "ask"
      summary: "Get ask details by ID"
      description: "Returns a user based on a single ID"
      operationId: "controllers.ask_controller.get_ask"
      produces:
        - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Ask"
        400:
          description: "Invalid request message"
        404:
          description: "Ask not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "ask"
      summary: "Update an existing ask"
      description: "Modify bid status only"
      operationId: "controllers.ask_controller.update_ask"
      consumes:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the marketplace"
        required: true
        schema:
          $ref: "#/definitions/Ask"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Ask not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
    delete:
      tags:
      - "ask"
      summary: "Deletes and existing ask"
      description: "Deletes a single bet based on the ID supplied"
      operationId: "controllers.ask_controller.del_ask"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "ask deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Ask not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /fok-asks:
    post:
      tags:
      - "ask"
      summary: "Fill or kill asks"
      description: "Only accept existing ask - selling request"
      operationId: "controllers.ask_controller.fok_ask"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/Ask"
      responses:
        204:
          description: "Deal succeed"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /book:
    get:
      tags:
      - "book"
      summary: "Lists the Book"
      description: "Lists entries from the book, and tells who own how many shares"
      operationId: "controllers.book_controller.list_entries"
      produces:
      - "application/json"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Symbol as a filter"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "Owner id as a filter"
        required: false
        type: "integer"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "book"
      summary: "Enter a new entry to the book"
      description: "Add token buying offering"
      operationId: "controllers.book_controller.add_entry"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book entry object that needs to be added to the book"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        201:
          description: "New ask was added to the market successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new entry"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /book/{id}:
    get:
      tags:
      - "book"
      description: "Returns an entry from the book based on a single ID"
      operationId: "controllers.book_controller.get_entry"
      produces:
        - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid request message"
        404:
          description: "Book entry not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "book"
      summary: "Update an existing entry of the book"
      description: ""
      operationId: "controllers.book_controller.update_entry"
      consumes:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      - in: "body"
        name: "body"
        description: "Book entry object that needs to be modified"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Book entry not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
    delete:
      tags:
      - "book"
      description: "Deletes a single book entry based on the ID supplied"
      operationId: "controllers.book_controller.del_entry"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "ask deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Book not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /wallet:
    get:
      tags:
      - "wallet"
      summary: "Lists wallets"
      description: "List of wallets of the users "
      operationId: "controllers.wallet_controller.list_wallets"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "query"
        description: "Owner id as a filter"
        required: false
        type: "integer"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Wallet"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "wallet"
      summary: "Add a new wallet"
      description: "Add a new wallet and associates it with the owner"
      operationId: "controllers.wallet_controller.add_wallet"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Wallet object that needs to be inserted"
        required: true
        schema:
          $ref: "#/definitions/Wallet"
      responses:
        201:
          description: "New wallet was added abd associated with the owner successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new entry"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
  /wallet/{id}:
    get:
      tags:
      - "wallet"
      description: "Returns a wallet info based on a single ID"
      operationId: "controllers.wallet_controller.get_wallet"
      produces:
        - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Wallet"
        400:
          description: "Invalid request message"
        404:
          description: "Wallet not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "wallet"
      summary: "Update an existing wallet"
      description: ""
      operationId: "controllers.wallet_controller.update_wallet"
      consumes:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      - in: "body"
        name: "body"
        description: "Wallet that needs to be modified"
        required: true
        schema:
          $ref: "#/definitions/Wallet"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Wallet not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
    delete:
      tags:
      - "wallet"
      description: "Deletes a wallet based on the ID supplied"
      operationId: "controllers.wallet_controller.del_wallet"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "ask deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Wallet not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      # security:
      # - OAuth2:
      #   - "investor"
parameters:
  offsetParam:
    in: "query"
    name: "offset"
    required: false
    type: "integer"
    minimum: 0
    description: "The number of items to skip before starting to collect the result set."
  limitParam:
    in: "query"
    name: "limit"
    required: false
    type: "integer"
    minimum: 1
    maximum: 1000
    default: 100
    description: "The numbers of items to return."
  idParam:
    in: "path"
    name: "id"
    description: "ID of the object to fetch"
    required: true
    type: "integer"
    format: "int64"
securityDefinitions:
  BasicAuth:
    type: "basic"
  ApiKeyAuth:
    type: "apiKey"
    in: "header"
    name: "X-API-Key"
  OAuth2:
    type: "oauth2"
    flow: "accessCode"
    authorizationUrl: "https://sunvibe.city/oauth/authorize"
    tokenUrl: "https://sunvibe.city/oauth/token"
    scopes:
      investor: "Grants investor access. Users with confirmed registration."
      registered: "Grants registered user access."
      admin: "Grants access to administrative information."
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      password:
        type: "string"
        format: "password"
      name:
        type: "string"
      phone:
        type: "string"
      email:
        type: "string"
      admin:
        type: "boolean"
        default: false
      investor:
        type: "boolean"
        default: false
      locale:
        type: "string"
        default: "en_US"
      verified:
        type: "boolean"
        default: false
      blocked:
        type: "boolean"
        default: false
      created:
        type: "string"
        format: "date-time"
      updated:
        type: "string"
        format: "date-time"
      bids:
        $ref: '#/definitions/Bid'
      asks:
        $ref: '#/definitions/Ask'
      book:
        $ref: '#/definitions/Book'
      wallets:
        $ref: '#/definitions/Wallet'
      transactions:
        $ref: '#/definitions/Transaction'
      sells:
        $ref: '#/definitions/Exchange'
      purchases:
        $ref: '#/definitions/Exchange'
    required:
      - "username"
  Bid:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      symbol:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
        description: "Bidder user id"
      active:
        type: "boolean"
        default: true
      created:
        type: "string"
        format: "date-time"
      updated:
        type: "string"
        format: "date-time"
      bidder:
        $ref: '#/definitions/User'
      company:
        $ref: '#/definitions/Company'
    required:
      - "symbol"
      - "quantity"
      - "price"
      - "user_id"
  Ask:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      symbol:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
        description: "Investor user id"
      active:
        type: "boolean"
        default: true
      created:
        type: "string"
        format: "date-time"
      updated:
        type: "string"
        format: "date-time"
      investor:
        $ref: '#/definitions/User'
      company:
        $ref: '#/definitions/Company'
    required:
      - "symbol"
      - "quantity"
      - "price"
      - "user_id"
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      symbol:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      user_id:
        type: "integer"
        format: "int64"
      created:
        type: "string"
        format: "date-time"
      updated:
        type: "string"
        format: "date-time"
      owner:
        $ref: '#/definitions/User'
      company:
        $ref: '#/definitions/Company'
    required:
      - "symbol"
      - "quantity"
      - "user_id"
  Wallet:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      currency:
        type: "string"
      amount:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      created:
        type: "string"
        format: "date-time"
      owner:
        $ref: '#/definitions/User'
    required:
      - "currency"
      - "amount"
      - "user_id"
  Transaction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      currency:
        type: "string"
      sent:
        type: "integer"
        format: "int32"
      received:
        type: "integer"
        format: "int64"
      fee:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      tags:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      user:
        $ref: '#/definitions/User'
    required:
      - "currency"
      - "sent"
      - "received"
      - "fee"
      - "user_id"
  Exchange:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      symbol:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int64"
      seller_id:
        type: "integer"
        format: "int64"
        description: "Seller user id"
      buyer_id:
        type: "integer"
        format: "int64"
        description: "Buyer user id"
      created:
        type: "string"
        format: "date-time"
      seller:
        $ref: '#/definitions/User'
      buyer:
        $ref: '#/definitions/User'
      company:
        $ref: '#/definitions/Company'
    required:
      - "symbol"
      - "quantity"
      - "price"
      - "seller_id"
      - "buyer_id"
  Company:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      symbol:
        type: "string"
      company_name:
        type: "string"
      industry:
        type: "string"
      website:
        type: "string"
      description:
        type: "string"
      sector:
        type: "string"
      tags:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      updated:
        type: "string"
        format: "date-time"
      bids:
        $ref: '#/definitions/Bid'
      asks:
        $ref: '#/definitions/Ask'
      book:
        $ref: '#/definitions/Book'
      exchanges:
        $ref: '#/definitions/Exchange'
    required:
      - "username"
  UnexpectedError:
    required:
      - "code"
      - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
externalDocs:
  description: "Find out more about SunVibe"
  url: "http://sunvibe.city"
