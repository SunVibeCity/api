swagger: "2.0"
info:
  description: "SunVibe is a Solar Energy Platform where small investors - crowd founders\
    \ - together finance solar panel installation on the roof of other peopleâ€™s -\
    \ roof lenders - house.\nThe installation is constructing by authorized Installers,\
    \ but the quality assurance and monitoring done by SunVibe.\n"
  version: "0.1.0"
  title: "SunVibe API"
  termsOfService: "http://sunvibe.vn/terms"
  contact:
    email: "apiteam@sunvibe.vn"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "bid"
  description: "Bid operations on SunVibeToken marketplace"
  externalDocs:
    description: "Find out more about our web site"
    url: "http://sunvibe.vn/investor"
- name: "ask"
  description: "Ask operations on SunVibeToken marketplace"
  externalDocs:
    description: "Find out more about our web site"
    url: "http://sunvibe.vn/investor"
- name: "user"
  description: "User operations, sign-in, log-in, list etc."
schemes:
- "http"
paths:
  /bids:
    get:
      tags:
      - "bid"
      summary: "List Bids"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "controllers.bid_controller.list_bids"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Bid"
        400:
          description: "Invalid request message"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "bid"
      summary: "Add a new bid to the market"
      description: "Add a token buying offer to the marketplace. "
      operationId: "controllers.bid_controller.add_bid"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Bid object that needs to be added to the market\nquantity is the amount of token and\
          \ price is VND price of one token"
        required: true
        schema:
          $ref: "#/definitions/NewBid"
      responses:
        201:
          description: "New bid was added to the market successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new bid"
              default: "/bisd/1"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /bids/{id}:
    get:
      tags:
      - "bid"
      summary: "Get bid details by ID"
      description: "Returns a bid based on a single ID"
      operationId: "controllers.bid_controller.get_bid"
      produces:
        - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Bid"
        400:
          description: "Invalid request message"
        404:
          description: "Bid not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "bid"
      summary: "Update an existing bid"
      description: "Modify bid status only"
      operationId: "controllers.bid_controller.update_bid"
      consumes:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      - in: "body"
        name: "body"
        description: "Bid object that needs to be modified"
        required: true
        schema:
          $ref: "#/definitions/Bid"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Bid not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
    delete:
      tags:
      - "bid"
      summary: "Deletes and existing bid"
      description: "Deletes a single bet based on the ID supplied"
      operationId: "controllers.bid_controller.del_bid"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        "204":
          description: "bid deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Bid not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /fok-bids:
    post:
      tags:
      - "bid"
      summary: "Fill or kill bids"
      description: "Only accept existing ask - selling request"
      operationId: "controllers.bid_controller.fok_bid"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Bid object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/NewBid"
      responses:
        204:
          description: "Deal succeed"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /asks:
    get:
      tags:
      - "ask"
      summary: "List Asks"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "controllers.ask_controller.list_asks"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Ask"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    post:
      tags:
      - "ask"
      summary: "Add a new ask to the market"
      description: "Add token buying offering"
      operationId: "controllers.ask_controller.add_ask"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/NewAsk"
      responses:
        201:
          description: "New ask was added to the market successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new ask"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /asks/{id}:
    get:
      tags:
      - "ask"
      description: "Returns a user based on a single ID, if the user does not have access to the pet"
      operationId: "controllers.ask_controller.get_ask"
      produces:
        - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Ask"
        400:
          description: "Invalid request message"
        404:
          description: "Ask not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
    put:
      tags:
      - "ask"
      summary: "Update an existing ask"
      description: ""
      operationId: "controllers.ask_controller.update_ask"
      consumes:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Ask"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Ask not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
    delete:
      tags:
      - "ask"
      description: "deletes a single bet based on the ID supplied"
      operationId: "controllers.ask_controller.del_ask"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "ask deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Ask not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /fok-asks:
    post:
      tags:
      - "ask"
      summary: "Fill or kill asks"
      description: "Only accept existing ask - selling request"
      operationId: "controllers.ask_controller.fok_ask"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ask object that needs to be added to the market"
        required: true
        schema:
          $ref: "#/definitions/NewAsk"
      responses:
        204:
          description: "Deal succeed"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /users:
    get:
      tags:
      - "user"
      summary: "Returns all users in the database."
      description: "Only the admin can access this."
      operationId: "controllers.user_controller.list_users"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "admin"
    post:
      tags:
      - "user"
      summary: "Creates a new user"
      description: "Only the admin user can create users."
      operationId: "controllers.user_controller.add_user"
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/NewUser"
          description: "The user account to create"
      responses:
        201:
          description: "New user was created successfully"
          headers:
            Location:
              type: "string"
              description: "The Server returns the URL of the new user"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
#      security:
#      - OAuth2:
#        - "admin"
  /users/{id}:
    get:
      tags:
      - "user"
      summary: "Retrieves a user"
      description: "Users can only retrieve their own account, except for the admin, who can retrieve anyone."
      operationId: "controllers.user_controller.get_user"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid request message"
        404:
          description: "Ask not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "registered"
    put:
      tags:
      - "user"
      summary: "Update a user"
      description: "Users can only update their own account, except the admin, who can edit anyone."
      operationId: "controllers.user_controller.update_user"
      consumes:
        - "application/json"
      parameters:
        - $ref: "#/parameters/idParam"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
          description: "The user account to create"
      responses:
        201:
          description: "Updated"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "Ask not found"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "registered"
    delete:
      tags:
      - "user"
      summary: "Deletes a user"
      description: "Users can only delete their own account, admin can delete everyone else."
      operationId: "controllers.user_controller.del_user"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "User deleted"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "User not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
      security:
      - OAuth2:
        - "investor"
  /users/login:
    post:
      tags:
      - "user"
      summary: "Logs in already registered users and admin"
      description: ""
      operationId: "controllers.user_controller.user_login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          description: "The login credentials"
          schema:
            $ref: "#/definitions/LoginUser"
      responses:
        200:
          description: "Login was successful"
          schema:
            type: "object"
            properties:
              sessionid:
                type: "string"
                description: "API or Session key."
                default: "123456789012345678901234567890"
          headers:
            Set-Cookie:
              type: "string"
              description: "The session cookie"
              default: "SESSIONID=123456789012345678901234567890; Path=/; HttpOnly"
        401:
          description: "Not authenticated"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
  /users/{id}/logout:
    post:
      tags:
      - "user"
      summary: "Logs out the given user"
      description: "Users can only log themselves out, admin can log-out anyone."
      operationId: "controllers.user_controller.user_logout"
      parameters:
      - $ref: "#/parameters/idParam"
      responses:
        204:
          description: "Logout was successful"
          headers:
            Set-Cookie:
              type: "string"
              description: "Deletes the session cookie for self logout"
              default: "SESSIONID=; Expires=Thu, 01-Jan-1970 00:00:01 GMT; Path=/"
        400:
          description: "Invalid request message"
        401:
          description: "Not authenticated"
        403:
          description: "Out of scope"
        404:
          description: "User not found"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/UnexpectedError"
parameters:
  offsetParam:
    in: "query"
    name: "offset"
    required: false
    type: "integer"
    minimum: 0
    description: "The number of items to skip before starting to collect the result set."
  limitParam:
    in: "query"
    name: "limit"
    required: false
    type: "integer"
    minimum: 1
    maximum: 1000
    default: 100
    description: "The numbers of items to return."
  idParam:
    in: "path"
    name: "id"
    description: "ID of the object to fetch"
    required: true
    type: "integer"
    format: "int64"
securityDefinitions:
  BasicAuth:
    type: "basic"
  ApiKeyAuth:
    type: "apiKey"
    in: "header"
    name: "X-API-Key"
  OAuth2:
    type: "oauth2"
    flow: "accessCode"
    authorizationUrl: "https://sunvibe.vn/oauth/authorize"
    tokenUrl: "https://sunvibe.vn/oauth/token"
    scopes:
      investor: "Grants investor access. Users with confirmed registration."
      registered: "Grants registered user access."
      admin: "Grants access to administrative information."
definitions:
  NewBid:
    type: "object"
    properties:
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int64"
      bidder:
        $ref: '#/definitions/Investor'
    required:
      - "quantity"
      - "price"
  Bid:
    allOf:
      - $ref: '#/definitions/NewBid'
      - properties:
          id:
            type: "integer"
            format: "int64"
          status:
            type: "string"
            description: "Bid Status"
            enum:
            - "open"
            - "cancelled"
            - "completed"
          active:
            type: "boolean"
            default: true
          created:
            type: "string"
            format: "date-time"
          modified:
            type: "string"
            format: "date-time"
        required:
          - "id"
  NewAsk:
    type: "object"
    properties:
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "integer"
        format: "int64"
      seller:
        $ref: '#/definitions/Investor'
    required:
      - "quantity"
      - "price"
  Ask:
    allOf:
      - $ref: '#/definitions/NewAsk'
      - properties:
          id:
            type: "integer"
            format: "int64"
          status:
            type: "string"
            description: "Bid Status"
            enum:
            - "open"
            - "cancelled"
            - "completed"
          active:
            type: "boolean"
            default: true
          created:
            type: "string"
            format: "date-time"
          modified:
            type: "string"
            format: "date-time"
        required:
          - "id"
  LoginUser:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
        format: "password"
  NewUser:
    allOf:
      - $ref: '#/definitions/LoginUser'
      - properties:
          id:
            type: "integer"
            format: "int64"
          name:
            type: "string"
          phone:
            type: "string"
          email:
            type: "string"
  User:
    allOf:
      - $ref: '#/definitions/NewUser'
      - properties:
          password:
            type: "string"
            format: "password"
  Investor:
    allOf:
      - $ref: '#/definitions/User'
  UnexpectedError:
    required:
      - "code"
      - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
externalDocs:
  description: "Find out more about SunVibe"
  url: "http://sunvibe.vn"
